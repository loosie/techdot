plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.github.node-gradle.node" version "3.1.1"
}

group = 'com.techdot'
version = '0.0.8-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	gradlePluginPortal()
}

// plain.jar 생성 x
jar{
	enabled = false
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2:1.4.199'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// query-dsl
	implementation 'com.querydsl:querydsl-jpa'
	implementation 'com.querydsl:querydsl-core'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"

	// testContainers
	testImplementation "org.testcontainers:junit-jupiter:1.16.3"
	testImplementation "org.testcontainers:mysql:1.16.3"

	// archunit
	testImplementation 'com.tngtech.archunit:archunit-junit5:0.23.1'

	// npm
	implementation 'com.github.node-gradle:gradle-node-plugin:3.1.0'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// aws s3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// localstack
	implementation "org.testcontainers:localstack:1.16.3"
	testImplementation "org.testcontainers:localstack:1.16.3"
}

def generated = 'generated'
sourceSets {
	main {
		java {
			srcDirs += generated
		}
	}
}

node {
	version = '14.17.6'
	download = true
	nodeModulesDir = file("${projectDir}/src/main/resources/static")
}

task copyFrontLib(type: Copy) {
	from "${projectDir}/src/main/resources/static"
	into "${projectDir}/build/resources/main/static/."
}

copyFrontLib.dependsOn npmInstall
compileJava.dependsOn copyFrontLib

tasks.named('test') {
	useJUnitPlatform()
}

// clean task 실행시 QClass 삭제
clean {
	delete file("${projectDir}/src/main/generated") // 인텔리제이 Annotation processor 생성물 생성 위치
}

clean.doLast {
	file(generated).deleteDir()
}

